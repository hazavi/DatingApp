@page "/connect"
@inject NavigationManager NavigationManager
@inject DatingApp.Data.DatingContext DB
@inject DatingApp.Services.UserService UserService
@using DatingApp.Models
@using DatingApp.Model.Enums
@using System.Linq
@using Microsoft.EntityFrameworkCore

@if (!UserService.IsLoggedIn)
{
    <div>Please <a href="/login">login</a> to view other user profiles.</div>
}
else
{
    <div class="container">
        <h1>Other User Profiles</h1>
        <div class="row">
            @foreach (var userProfile in UserProfiles)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">@userProfile.UserName</h5>
                        </div>
                        <div class="card-body">
                            <dl>
                                <dt>Birth Date:</dt>
                                <dd>@FormatBirthDate(userProfile.BirthDate)</dd>
                                <dt>Height:</dt>
                                <dd>@userProfile.Height cm</dd>
                                <dt>About Me:</dt>
                                <dd>@userProfile.AboutMe</dd>
                                <dt>Gender:</dt>
                                <dd>@userProfile.Gender</dd>
                                <dt>City Name:</dt>
                                <dd>@userProfile.CityName</dd>
                                <dt>Hobbies:</dt>
                                <dd>@userProfile.Hobbies</dd>
                            </dl>
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-primary" @onclick="() => LikeUser(userProfile.UserId)">Like</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<DatingApp.Models.UserProfile> UserProfiles { get; set; } = new List<DatingApp.Models.UserProfile>();

    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsLoggedIn)
        {
            UserProfiles = await DB.UserProfiles.Where(u => u.UserId != UserService.Id).ToListAsync();
        }
    }

    private async Task LikeUser(int likedUserId)
    {
        if (UserService.IsLoggedIn)
        {
            // Check if the user has already liked this user
            var existingLike = await DB.Likes
                .FirstOrDefaultAsync(l => l.LikerId == UserService.Id && l.LikeeId == likedUserId);

            if (existingLike == null)
            {
                // Create a new like
                var newLike = new Like
                    {
                        LikerId = UserService.Id,
                        LikeeId = likedUserId,
                        Status = 1 // Liked
                    };

                DB.Likes.Add(newLike);
                await DB.SaveChangesAsync();
                Console.WriteLine($"User with ID {likedUserId} liked by user with ID {UserService.Id}");
            }
            else
            {
                // Toggle the like status
                existingLike.Status = existingLike.Status == 0 ? 1 : 0;
                await DB.SaveChangesAsync();
                Console.WriteLine($"User with ID {likedUserId} like status toggled by user with ID {UserService.Id}");
            }
        }
        else
        {
            // Optionally, display a message indicating that the user needs to be logged in to like other users
            Console.WriteLine("Please log in to like other users.");
        }
    }


    private string FormatBirthDate(DateTime? birthDate)
    {
        // Implement the method to format the birth date as desired
        // For example:
        if (birthDate.HasValue)
        {
            return birthDate.Value.ToString("MMMM dd, yyyy");
        }
        else
        {
            return "Unknown";
        }
    }
}
