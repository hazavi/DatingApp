@page "/connect"
@inject NavigationManager NavigationManager
@inject DatingApp.Data.DatingContext DB
@inject DatingApp.Services.UserService UserService
@using DatingApp.Models
@using DatingApp.Model.Enums
@using System.Linq
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@if (!UserService.IsLoggedIn)
{
    <div>Please <a href="/login">login</a> to view other user profiles.</div>
}
else
{
    <div class="container">
        <h1>User Profiles</h1>
        <div class="row">
            @foreach (var userProfile in UserProfiles)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">@userProfile.UserName</h5>
                        </div>
                        <div class="card-body">
                            <dl>
                                <dt>Birth Date:</dt>
                                <dd>@FormatBirthDate(userProfile.BirthDate)</dd>
                                <dt>Height:</dt>
                                <dd>@userProfile.Height cm</dd>
                                <dt>About Me:</dt>
                                <dd>@userProfile.AboutMe</dd>
                                <dt>Gender:</dt>
                                <dd>@userProfile.Gender</dd>
                                <dt>City Name:</dt>
                                <dd>@userProfile.CityName</dd>
                                <dt>Hobbies:</dt>
                                <dd>@userProfile.Hobbies</dd>
                            </dl>
                        </div>
                        <div class="card-footer">
                            <button class="btn @(LikedStatus.ContainsKey(userProfile.UserId) && LikedStatus[userProfile.UserId] ? "btn-success" : "btn-primary")"
                                    @onclick="() => LikeUser(userProfile.UserId)">
                                @(LikedStatus.ContainsKey(userProfile.UserId) && LikedStatus[userProfile.UserId] ? "Liked" : "Like")
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<DatingApp.Models.UserProfile> UserProfiles { get; set; } = new List<DatingApp.Models.UserProfile>();
    private Dictionary<int, bool> LikedStatus = new Dictionary<int, bool>();

    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsLoggedIn)
        {
            UserProfiles = await DB.UserProfiles.Where(u => u.UserId != UserService.Id).ToListAsync();
            foreach (var profile in UserProfiles)
            {
                var isLiked = await DB.Likes.AnyAsync(l => l.LikerId == UserService.Id && l.LikeeId == profile.UserId && l.Status == 1);
                LikedStatus[profile.UserId] = isLiked;
            }
        }
    }

    private async Task LikeUser(int likedUserId)
    {
        if (!UserService.IsLoggedIn) return;

        var existingLike = await DB.Likes.FirstOrDefaultAsync(l => l.LikerId == UserService.Id && l.LikeeId == likedUserId);

        if (existingLike == null)
        {
            var newLike = new Like
                {
                    LikerId = UserService.Id,
                    LikeeId = likedUserId,
                    Status = 1 // Liked
                };

            DB.Likes.Add(newLike);
            LikedStatus[likedUserId] = true;
        }
        else
        {
            // Toggle the like status for simplicity; adjust according to your logic.
            existingLike.Status = existingLike.Status == 0 ? 1 : 0;
            LikedStatus[likedUserId] = existingLike.Status == 1;
        }

        await DB.SaveChangesAsync();
        StateHasChanged(); // This refreshes the UI with the new like statuses
    }

    private string FormatBirthDate(DateTime? birthDate)
    {
        return birthDate.HasValue ? birthDate.Value.ToString("MMMM dd, yyyy") : "Unknown";
    }
}
